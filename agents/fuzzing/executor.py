import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from langchain_community.tools import ShellTool
from tools.playwright_toolkit.custom_playwright_toolkit import PlayWrightBrowserToolkit
from langchain_community.tools.playwright.utils import create_async_playwright_browser

from typing import Literal

from langgraph.graph import MessagesState
from langgraph.types import Command
from langgraph.prebuilt import create_react_agent
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage

from tools.handoff_tool import make_handoff_tool

import nest_asyncio
nest_asyncio.apply()

class State(MessagesState):
    next: str

shell_tool = ShellTool()
shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace("{", "{{").replace("}", "}}")

async_browser = create_async_playwright_browser()
browser_toolkit = PlayWrightBrowserToolkit.from_browser(async_browser=async_browser)
browser_tools = browser_toolkit.get_tools()
all_default_tools = browser_tools + [shell_tool]

execute_prompt = '''You are a fuzz execution agent. 
You will receive a set of fuzz payloads (generated by another agent) along with details about the target URL, 
form fields, or parameters to attack. Your task:
1. Take each fuzz payload.
2. Inject it into the targetâ€™s input fields, URLs, or headers using the provided Playwright and shell tools.
3. Observe responses, check for errors or anomalies.
4. Summarize any potential findings.'''

model = ChatOpenAI(model="gpt-4o-mini")

executor_agent = create_react_agent(
    model=model,
    tools=all_default_tools,
    name="fuzz_executor",
    prompt=execute_prompt
)

async def fuzz_executor_node(state: State) -> Command[Literal["supervisor", "fuzz", "human"]]:
    result = await executor_agent.ainvoke(state)
    final_message = result["messages"][-1].content

    return Command(
        update={
            "messages": [
                HumanMessage(content=final_message, name="fuzz_executor")
            ]
        },
        goto="human",
    )
